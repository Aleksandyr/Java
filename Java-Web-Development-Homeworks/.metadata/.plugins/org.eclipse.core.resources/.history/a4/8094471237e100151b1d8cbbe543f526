package bg.jwd.webBank.security;

import java.math.BigInteger;
import java.security.MessageDigest;
import java.util.List;

import org.springframework.security.core.GrantedAuthority;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.security.core.userdetails.UserDetailsService;
import org.springframework.security.core.userdetails.UsernameNotFoundException;

import bg.jwd.webBank.controllers.Database;
import bg.jwd.webBank.database.WebBankDatabase;
import bg.jwd.webBank.entities.User;

public class UserDetailsServiceImpl implements UserDetailsService {

	private WebBankDatabase db;

	public UserDetailsServiceImpl() {
		db = Database.getDatabase();
	}

	@Override
	public UserDetails loadUserByUsername(String username) throws UsernameNotFoundException {
		// List<GrantedAuthority> authorities = new ArrayList<>();
		// authorities.add(new SimpleGrantedAuthority("ROLE_USER"));
		// authorities.add(new SimpleGrantedAuthority("ROLE_BANK_EMPLOYEE"));
		User user = this.db.getUser(username);

		return user;
	}

	public UserDetails addUser(String username, String password, List<GrantedAuthority> authorities) {
		String hashedPassword = this.getMD5(password);

		User user = new User(username, hashedPassword, authorities);

		this.db.addUser(user);

		return user;
	}

	private String getMD5(String input) {

		MessageDigest md = MessageDigest.getInstance("MD5");
		byte[] messageDigest = md.digest(input.getBytes());
		BigInteger number = new BigInteger(1, messageDigest);
		String hashtext = number.toString(16);
		// Now we need to zero pad it if you actually want the full 32 chars.
		while (hashtext.length() < 32) {
			hashtext = "0" + hashtext;
		}
		return hashtext;
	}

}