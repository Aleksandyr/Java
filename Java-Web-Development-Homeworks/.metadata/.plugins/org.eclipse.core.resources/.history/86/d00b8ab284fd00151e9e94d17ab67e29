package bg.jwd.library.controller.book;

import java.io.UnsupportedEncodingException;
import java.security.NoSuchAlgorithmException;
import java.text.ParseException;
import java.util.ArrayList;
import java.util.List;
import java.util.stream.Collectors;

import javax.servlet.http.HttpServletRequest;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.access.annotation.Secured;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;

import bg.jwd.library.constants.UrlConstants;
import bg.jwd.library.entity.book.Book;
import bg.jwd.library.security.User;
import bg.jwd.library.service.book.BookService;

@Controller
@RequestMapping(UrlConstants.BASE_BOOK_URL)
public class BookController {

	@Autowired
	private BookService bookService;

	@RequestMapping(value = UrlConstants.LIST_URL, method = RequestMethod.GET)
	public String getAllBooksPage(Model model, @RequestParam(value = "name", required = false) String name,
			@RequestParam(value = "author", required = false) String author,
			@RequestParam(value = "yearOfPoublishing", required = false) String yearOfPoublishing) {

		List<Book> books = new ArrayList<Book>();

		String paramName = name;
		String paramAuthor = author;
		String paramYearOfPoublishing = yearOfPoublishing;

		if (paramName != null) {
			books = this.bookService.getAllBooks().stream().filter(b -> b.getName().equals("new book"))
					.collect(Collectors.toList());
		}

		books = this.bookService.getAllBooks();

		model.addAttribute("books", books);

		Authentication authentication = SecurityContextHolder.getContext().getAuthentication();
		User user = (User) authentication.getPrincipal();

		model.addAttribute("username", user.getUsername());

		return "/book/allBooks";
	}

	@RequestMapping(value = UrlConstants.MY_BOOKS_URL, method = RequestMethod.GET)
	public String getMyBooksPage(Model model) throws ParseException {

		Authentication authentication = SecurityContextHolder.getContext().getAuthentication();
		User user = (User) authentication.getPrincipal();

		model.addAttribute("myBooks", bookService.getMyBooks(user.getId()));

		model.addAttribute("username", user.getUsername());

		return "/book/myBooks";
	}

	@Secured("ROLE_ADMIN")
	@RequestMapping(value = UrlConstants.ADD_URL, method = RequestMethod.GET)
	public String addBookPage(Model model) {

		return "/book/addBook";
	}

	@Secured("ROLE_ADMIN")
	@RequestMapping(value = UrlConstants.ADD_URL, method = RequestMethod.POST)
	public String addUser(HttpServletRequest request, @ModelAttribute("book") Book book)
			throws UnsupportedEncodingException, NoSuchAlgorithmException, ParseException {

		boolean isAdded = this.bookService.addBook(book);
		if (isAdded == true) {
			return "redirect:" + UrlConstants.BASE_HOME_URL + UrlConstants.HOME_URL;

		} else {
			return "/book/addBook";
		}
	}

	@Secured("ROLE_ADMIN")
	@RequestMapping(value = UrlConstants.UPDATE_URL + "/{id}", method = RequestMethod.GET)
	public String editBookPage(@PathVariable("id") long bookId, Model model) {

		Book book = this.bookService.getBookById(bookId);

		if (book != null) {
			model.addAttribute("book", book);

			return "/book/editBook";

		} else {
			return "redirect:" + UrlConstants.BASE_HOME_URL + UrlConstants.HOME_URL;
		}
	}

	@Secured("ROLE_ADMIN")
	@RequestMapping(value = UrlConstants.UPDATE_URL + "/{id}", method = RequestMethod.POST)
	public String editBook(@PathVariable("id") long bookId, Model model, @ModelAttribute("book") Book book)
			throws ParseException {

		Boolean isEdited = this.bookService.editBookFromAdminById(bookId, book);

		if (isEdited == true) {
			return "redirect:" + UrlConstants.BASE_BOOK_URL + UrlConstants.LIST_URL;

		} else {
			return "/book/editBook";
		}
	}

	@Secured("ROLE_ADMIN")
	@RequestMapping(value = UrlConstants.DELETE_URL + "/{id}", method = RequestMethod.GET)
	public String deteleBookPage(@PathVariable("id") long bookId, Model model) {

		Book book = this.bookService.getBookById(bookId);

		if (book != null) {
			model.addAttribute("book", book);

			return "/book/deleteBook";

		} else {
			return "redirect:" + UrlConstants.BASE_HOME_URL + UrlConstants.HOME_URL;
		}
	}

	@Secured("ROLE_ADMIN")
	@RequestMapping(value = UrlConstants.DELETE_URL + "/{id}", method = RequestMethod.POST)
	public String deleteBook(@PathVariable("id") long bookId, Model model) {

		Boolean isDeleted = this.bookService.deleteBookById(bookId);

		if (isDeleted == true) {
			return "redirect:" + UrlConstants.BASE_BOOK_URL + UrlConstants.LIST_URL;

		} else {
			return "/book/deleteBook";
		}
	}

}
