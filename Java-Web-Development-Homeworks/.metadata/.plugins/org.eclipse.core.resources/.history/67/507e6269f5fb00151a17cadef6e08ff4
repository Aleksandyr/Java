package bg.jwd.library.controller.book;

import javax.servlet.http.HttpServletRequest;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.access.annotation.Secured;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;

import bg.jwd.library.constants.UrlConstants;
import bg.jwd.library.entity.user.AutoUser;
import bg.jwd.library.security.User;
import bg.jwd.library.service.book.BookService;

@Controller
@RequestMapping(UrlConstants.BASE_BOOK_URL)
@Secured("ROLE_ADMIN")
public class BookController {

	@Autowired
	private BookService bookService;

	@RequestMapping(value = UrlConstants.ALL_BOOKS_URL, method = RequestMethod.GET)
	public String getAllBooksPage(Model model) {

		model.addAttribute("books", bookService.getAllBooks());

		Authentication authentication = SecurityContextHolder.getContext().getAuthentication();
		User user = (User) authentication.getPrincipal();

		model.addAttribute("username", user.getUsername());

		return "/book/allBooks";
	}
	
	@RequestMapping(value = UrlConstants.EDIT_BOOKS_URL + "/{id}", method = RequestMethod.GET)
	public String editUserPage(@PathVariable("id") long userId, Model model) {

		AutoUser user = this.userService.getUserById(userId);

		if (user != null) {
			model.addAttribute("user", user);

			return "/user/editUserAdmin";

		} else {
			return "redirect:" + UrlConstants.BASE_HOME_URL + UrlConstants.HOME_URL;
		}
	}

	@RequestMapping(value = UrlConstants.EDIT_BOOKS_URL + "/{id}", method = RequestMethod.POST)
	public String editUser(@PathVariable("id") long userId, Model model, HttpServletRequest request) {

		int status = Integer.parseInt(request.getParameter("status_select"));
		Boolean isEdited = this.userService.editUserFromAdminById(userId, status);

		if (isEdited == true) {
			return "redirect:" + UrlConstants.BASE_USER_URL + UrlConstants.ALL_USERS_URL;

		} else {
			return "/user/editUserAdmin";
		}
	}

}
